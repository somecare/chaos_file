# 初始化git
git init
# 添加用户(设置签名)
git config --global user.name xxx
git config --global user.email xxx

# 首次由工作区提交到缓冲区
git add file_name

# 由工作区提交到本地库
git commit -m "commit log" file_name

# 查看git状态
OBgit status 

# 实现版本的前进和后退

# 查看版本提交记录
git log 

git log --pretty=oneline
git log --oneline
git reflog

# 控制版本前进与后退
# way1.使用git relog，确定索引 ，然后使用下面命令
git reset --hard [index_number]

# way2.使用^符号表示朝前退，使用git log --oneline
git reset --hard HEAD^  # 朝前退一个

git reset --hard HEAD^^^ # 朝前退3个,^

git reset --hard HEAD~3  # 朝前退3个，和上面的效果是一样的

# 查看帮助,是在线文档
git help [command]
git help reset

# 对比 reset参数
#  --soft 	仅仅在本地库移动HEAD指针
#  --mixed	上一步的基础上重置缓存区
#  --hard	上一步的基础上重置工作区

# 找回删除文件(文件提交到本地库了)
git reset --hard HEAD   # 删除操作没提交到本地库 
git reset --hard HEAD^  # 删除操作提交到本地库，就移动指针


# 比较文件
git diff [filename]	#工作区和缓冲区比较
git diff [HEAD] [filename]	#工作区和本地库某个版本比较
git diff [HEAD]		# 比较所有软件


##### 分支：版本控制过程中，使用多条线推进任务
#
#	hot_fix		热修复：服务器程序不停
# 	master ----- 			---合并
# 	branch1     -----|----
# 	branch2	    -----|----
# 
# 分支之间不会互相影响，并行前行

# 创建分支
git branch [branch_name]

# 查看所有分支
git branch -v

# 切换分支
git checkout [branch_name]


# 合并分支
# 把branch合并到master，
# 1.首先切换到master上
# 2.执行merge命令

git checkout master
git branch -v
git merge branch

# 即完成合并


# 冲突解决的方法
#
# 本分支的内容
# <<<<<<< HEAD
#        print("this is hot_fix")#hot_fix
# =======
# 另一个分支的内容
#        print("this is master") #master
# >>>>>>> master
#
##直接删除掉特殊符号，编辑到最终结果

# 使用提示命令
git add [conflict_file]
# 使用下面命令确认结果
git commit -m "log"


# 哈希 
# 哈希是一系列的加密算法
# 特点：1.输入数据多大，哈希算法固定，结果长度固定
#	2.哈希算法和输入数据确定，结果亦确定
#	3.哈希算法确定，输入变化，结果亦变化
#	4.哈希算法不可逆
#	git底层采用的是SHA-1算法
#	比如网络传输通过比较哈希计算结果来判断文件是否有损坏
#

#git 通过快照保存节点，树形结构保存文件，版本前后通过指针关联。
#
# 分支管理：通过指针指向同一个HEAD
#
#


#### git 与github之间的交互

# 使用git remote -v 查看添加的远程连接内容，
git remote -v

# 使用git remote add origin [http://...]增加远程链接
git remote add origin []


# 上传 git + push + origin + 分支名
git push origin master

# 克隆
# 一条指令完成下面三个动作
#
# 1.把完整的远程库下载到本地
# 2.创建origin远程地址别名   使用git remote -v
# 3.自动初始化本地库  有.git 说明的

git clone [http://]

#可以使用git remote -v 查看对应的http网址


# 邀请其他成员加入github中
#    -仓库中有settings->collaborators->输入需要邀请人的账号 -> 复制链接发送给被邀请人  -> 被邀请的人接受就可以了
#
#   Windows凭据管理器  会记录账号，不需要时可以删除
#

# pull = fetch + merge
#
# 抓取远程库，并没有改本地工作区的文件
#
 git fetch [远程http][分支]
 git fetch origin master  

# 查看抓取来的文件 
 git checkout origin/master
# 然后没问题再合并

 git merge origin/master

# 如果有冲突，github不允许将冲突文件提交
# 解决方法是pull拉下来，然后合并修改“分支冲突操作”后再次提交。
#


# 跨团队合作
# A： 创建人    B：团队外合伙人
# 
# 1. B到A的github上fork一个
# 2. B clone到本地，然后修改
# 3. B 上传到自己的github账号
# 4. B 在github上选择pull requst 
# 5. B 然后选择 new pull request
# 6. B 然后选择Create pull request
# 7. B 注意要写入请求标题和信息
#
# 8. A 在github上登陆自己的账号
# 9. A 选择pull request，可以看到B 提交的pull request 申请了
# 10. A 看了内容可以隔空对话，回消息，B也可以回消息
# 11. A 查看 filechanged 审核代码
# 12. A 看好了没问题，选择merge pull request，合并代码
# 13. A 合并的时候写好记录
# 14. A 可以将合并后的代码拉到本地
#
#
# 操作完成


# http 的方式，不是很方便，每次可能要登录
#
# SSH 的 相对方便
# 
# 1. 进入当前用户家目录，
#    $ cd ~
# 2. 删除.ssh目录
#    $ rm -rvf .ssh
# 3. 运行命令生成.ssh 密钥目录
#    $ ssh-keygen -t rsa -C [邮箱地址]
# 4. 进入.ssh目录查看文件列表
#    $ cd .ssh
#    $ ls -IF
# 5. 查看id_rsa.pub文件的内容
#    $ cat id_rsa.pub
# 6. 复制id_rsa.pub文件内容，登录github，点击用户头像->setting->SSH and GPG
# 7. new SSH Key
# 8. 输入复制 的内容
# 
# 9. 回到git bash 创建远程地址和别名
#    $ git remote add origin_ssh [ssh 文件链接(github中下载地方可以选)]
# 10。 完成，可以推送测试
#
#
